---
layout: post
title:  "CoinSpark Assets (Introduction)"
categories: blog
---
今回はCoinSpark Assetsのイントロダクションを訳してみる。

### [CoinSpark Assets](http://coinspark.org/developers/assets-introduction/)

*CoinSparkはbitcoinネットワークへのweb-backedなアセットの発行や取引を実現します*

CoinSparkアセットは[Colored Coins](http://www.coloredcoins.org/)ファミリーの一員であると言えますが、CoinSparkではbitcoinの単位では直接は色づけられていません。その代わりbitcoinトランザクションのそれぞれの出力には、通常のbitcoinと共に、単一もしくは複数のCoinSparkアセットの数量を含むことができます。トランザクションの出力が他のトランザクションの入力によって'使用された'時、特定のCoinSparkアセットの全ての単位はbitcoinと共に新しいトランザクションに流れ込むとともに、添付された<sub>[1](#)</sub>任意の[転送メタデータ](#)に一致する（新しいトランザクションの）アウトプットの間で分配されます。

CoinSparkプロトコルは特にスケーラビリティとユーザビリティを考慮して設計されています。設計の基本原則の一つは *アセットの独立性(independence)* であり、これはある特定のCoinSparkアセットの動きは他のアセットの動きとは無関係にbitcoinのトランザクションを横断して追跡できるということを意味します。もう一つの基本原則は *アセットの発見容易性(discoverability)* であり、これはCoinSparkワレットのユーザはあらゆる種類のアセットを単一のアドレスで受け取ることができ、そのワレットはやって来た新しい種類のアセット自動的に読み込み／認識するということです。さらに詳しくは[Bitcoin Colors](http://www.coincolors.org/)ホワイトペーパーに書かれています。

新しいCoinSparkアセットは、`OP_RETURN`に[ジェネシス(起源)メタデータ](#)を含むbitcoinトランザクションによって生成されます。このメタデータは、キーパラメータの個数と共に、発行した単位数、トランザクション手数料、アセットの[Webページ](#)のURL、そしてプルーフ・オブ・コントラクトとしての[アセットハッシュ](#)をエンコードしたものです。もしこのジェネシスメタデータが[正当](#)であれば、必要数を生成するために、非`OP_RETURN`の全ての出力（最後を除く）にある同数のアセットが'デポジット<sub>[2](#2)</sub>され'ます。一度ジェネシストランザクションがブロックチェーン上でコンファームされると、そのトランザクションが生成したアセットは[アセット参照](#)により簡潔に参照できます。

デフォルトでは、あるトランザクションの入力に存在する全てのCoinSparkアセットは、そのトランザクションの最後の非`OP_RETURN`出力へと流れこみます。しかしあるトランザクションが`OP_RETURN`に[転送メタデータ](#)を含み、かつその転送が[正当](#)である場合、このデフォルトの振る舞いを、あるアセットのいくつかの単位数が特定の入力から特定の出力へと送られるように変更することができます。CoinSparkプロトコルは高効率のエンコード方法を採用しているため、`OP_RETURN`の40byte制約の中でもこのような多数の転送を表現することができます。

全てのCoinSparkアセットは[Webページ](#)を持ち、そのURLはアセットを生成したトランザクションの[ジェネシスメタデータ](#)により与えられます。Webページは通常のWebブラウザによって表示できるだけでなく、JSON形式のアセットに関するマシンリーダブルな情報を含みます。その[JSON](http://en.wikipedia.org/wiki/JSON)には、アセットの発行者その保持者の間の法的な関係を定義する契約へのリンクがあります。いくつかのJSONフィールドは、契約の中身とともに[アセットハッシュ](#)の算出に使われます。このハッシュは[ジェネシスメタデータ](#)の中に埋め込まれ、契約の発行者がその発行後にアセットの重要な法的位置づけを変えられないことを保障する役割を担います。

特定のbitcoinトランザクションの出力にある特定のCoinSparkアセットの数量を知るため、そのアセットの起源からの履歴はそれが取引されたトランザクションの全てに渡って追跡できることが求められます。
なぜなら通常のbitcoinノードはCoinSparkプロトコルを知らないため、アセットの数量の検証や追跡を直接ノードに委任できないためです。仮にbitcoinワレットが全てのブロックチェーンをダウンロードし、全ての情報を持っていても、大変時間のかかる処理であることは承知の上で<sub>[3](#3)</sub>ワレットはこの計算を行う必要があります。それ故にCoinSparkは全てのアセット発行者に対して、アセットWebページのJSONの中に一つ以上の追跡サーバのアドレスを提供することを求めます。追跡サーバは、ネットワークに対して発行されたトランザクションについて出力のアセットの収支を計算し、その収支に関するワレットからの要求に対して応答します。発行者は`asses[1|2|3].coinspark.org`にある無料の追跡サーバを自由に利用できます。また我々は自分自身で[アセット追跡サーバ](#)を立ち上げたい発行者のために、オープンソースのサーバを提供しています。


<small>
<a name="1">1.</a>添付が何を指すのかわかってない。<br>
<a name="2">2.</a>デポジットとそのまま訳したが、どういう状態を指しているのかが分からないので、適切なのかどうか判断がつかない。<br>
<a name="3">3.</a> `..., it has all the information it needs to perform this calculation, ...` の部分をどう切ったらいいか分からない。なんとなく感覚で訳した。<br>
</small>

### 脱線

冒頭で *web-backed* と謳ってる通り、CoinSparkにはアセットの発行者や送信者が指定するサーバを補完的に使うという思想が見受けられる。
ただ、サーバへのDDoSやなりすましなどによる攻撃も可能そうなので、信頼性をどう担保しているのか知りたい所。まあ、後者はSSLを使え!で済む話かもしれないけど。

これからはもう少し詳細にはいっていきます。
